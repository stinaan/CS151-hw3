import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.geom.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;

/**
  A class that implements an Observer object that displays a barchart view of
  a data model.
*/
public class BarFrame extends JFrame implements ChangeListener, MouseListener
{
   /**
      Constructs a BarFrame object
      @param dataModel the data that is displayed in the barchart
   */
   public BarFrame(DataModel dataModel)
   {
      this.dataModel = dataModel;
      a = dataModel.getData();

      setLocation(0,200);
      setLayout(new BorderLayout());

      Icon barIcon = new Icon()
      {
         public int getIconWidth() 
         { return ICON_WIDTH; }
         
         public int getIconHeight() 
         { return ICON_HEIGHT; }
         
         
         public void paintIcon(Component c, Graphics g, int x, int y)
         {
            Graphics2D g2 = (Graphics2D) g;

            g2.setColor(Color.red);

            double max =  (a.get(0)).doubleValue();
            for (Double v : a)
            {
               double val = v.doubleValue();
               if (val > max)
                  max = val;
            }

            barHeight = getIconHeight() / a.size();

        	//System.out.println(barHeight);

            
            int i = 0;
            for (Double v : a)
            {
            	//System.out.println(a.size());
               double value = v.doubleValue();

               double barLength = getIconWidth() *value/ max;

               Rectangle2D.Double rectangle = new Rectangle2D.Double
                  (0, barHeight * i, barLength, barHeight);
               i++;
               g2.fill(rectangle);
            }
         }
      };
      
      
      
      add(new JLabel(barIcon));

      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      pack();
      setVisible(true);
   }

   /**
      Called when the data in the model is changed.
      @param e the event representing the change
   */
   public void stateChanged(ChangeEvent e)
   {
      a = dataModel.getData();
      repaint();
   }
   
   public double getBarHeight()
   {
	   return barHeight;
   }

   private ArrayList<Double> a;
   private DataModel dataModel;
   private double barHeight;

   private static final int ICON_WIDTH = 200;
   private static final int ICON_HEIGHT = 200;



@Override
public void mousePressed(MouseEvent e) {
	// TODO Auto-generated method stub
	int x = e.getX();
	int y = e.getY();
	
	if(y >=0 && y <barHeight*1)
	{
		dataModel.update(0, x);
		//a.get(0);
	}
	else if(y >=barHeight*1 && y <barHeight*2)
	{
		dataModel.update(1, x);
		a.get(1);
	}
	else if(y >=barHeight*2 && y <barHeight*3)
	{
		dataModel.update(2, x);
		a.get(2);
	}
	else if(y >=barHeight*3 && y <=barHeight*4)
	{
		dataModel.update(3, x);
		a.get(3);
	}
	
	repaint();
	
	
	
	
	
	a = dataModel.getData();
    repaint();
    }

public void addMouseListener(MouseListener listener) {
	// TODO Auto-generated method stub
	
}

}